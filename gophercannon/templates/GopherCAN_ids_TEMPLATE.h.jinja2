// GopherCAN_ids.h
//  This header file houses all of the auto-generated IDs for modules, parameters, and CAN
//  command IDs. This file can be completely auto-generated


#ifndef GOPHERCAN_IDS_H
#define GOPHERCAN_IDS_H

// Generated by GopherCANnon

#define GOPHERCAN_HASH {{ repo_hash }}


// Module IDs:
typedef enum
{
    ALL_MODULES_ID = 0,
    {% for module in modules -%}
    {{ module.name }}_ID = {{ module.id }},
    {% endfor %}
} MODULE_ID;

#define NUM_OF_MODULES {{ modules|length + 1 }}


// Parameter IDs:
typedef enum
{
    CAN_COMMAND_ID = 0,
    {% for parameter in parameters -%}
    {{ parameter.name.upper() }}_ID = {{ parameter.id }},
    {% endfor %}
} GCAN_PARAM;

#define NUM_OF_PARAMETERS {{ parameters|length + 1 }}


// TODO custom command IDs


// Error IDs:
{% for error in errors -%}
#define {{ error.name.upper() }}_ID {{ error.id }},
{% endfor %}


#endif // GOPHERCAN_IDS_H

// this is so this file can be included again when this part is needed
#ifdef AUTOGEN_EXTERNS
#ifndef GOPHERCAN_IDS_H_P2
#define GOPHERCAN_IDS_H_P2

// all of the global parameter struct externs so all files including GopherCAN.h
// have access
CAN_COMMAND_STRUCT CAN_COMMAND;
{% for parameter in parameters -%}
extern {{ parameter.struct.upper() }} {{ parameter.name }},
{% endfor %}

#endif // GOPHERCAN_IDS_H_P2
#endif // AUTOGEN_EXTERNS


// End of GopherCAN_ids.h


// start of GopherCAN.c auto-gen

// ******** BEGIN AUTO GENERATED ********

// all of the global parameter structs
CAN_COMMAND_STRUCT CAN_COMMAND;
{% for parameter in parameters -%}
extern {{ parameter.struct.upper() }} {{ parameter.name }},
{% endfor %}

// this is the struct that will be used to reference based on ID
void* all_parameter_structs[NUM_OF_PARAMETERS] =
{
        &can_command,
        {% for parameter in parameters -%}
        &{{ parameter.name }},
        {% endfor %}
};


// TODO parameter_data_types

// TODO multiple busses defines

// ******** END AUTO GENERATED ********

// End of GopherCAN.c auto-gen
