// GopherCAN_ids.h
//  This header file houses all of the auto-generated IDs for modules, parameters, and CAN
//  command IDs. This file can be completely auto-generated


#ifndef GOPHERCAN_IDS_H
#define GOPHERCAN_IDS_H

// Generated by GopherCANnon

#define GOPHERCAN_HASH {{ repo_hash }}


// Module IDs:
typedef enum
{
    ALL_MODULES_ID = 0,
    {% for module in modules -%}
    {{ module.name }}_ID = {{ module.id }},
    {% endfor %}
    NUM_OF_MODULES
} MODULE_ID;


// Parameter IDs:
typedef enum
{
    CAN_COMMAND_ID = 0,
    {% for parameter in parameters -%}
    {{ parameter.name.upper() }}_ID = {{ parameter.id }},
    {% endfor %}
    NUM_OF_PARAMETERS
} GCAN_PARAM_ID;


// custom command IDs
typedef enum
{
    {% for command in commands -%}
    {{ command.name.upper() }} = {{ command.id }},
        // parameter 0: {{ command.param_0 }}
        // parameter 1: {{ command.param_1 }}
        // parameter 2: {{ command.param_2 }}
        // parameter 3: {{ command.param_3 }}
        // comment: {{ command.comment }}
        
    {% endfor %}
    NUM_OF_COMMANDS
} GCAN_COMMAND_ID;


// Error IDs:
{% for error in errors -%}
#define {{ error.name.upper() }} {{ error.id }}
{% endfor %}


#endif // GOPHERCAN_IDS_H


// this is so this file can be included again when this part is needed
#ifdef AUTOGEN_EXTERNS
#ifndef GOPHERCAN_IDS_H_P2
#define GOPHERCAN_IDS_H_P2

// all of the global parameter struct externs so all files including GopherCAN.h
// have access
extern CAN_COMMAND_STRUCT can_command;
{% for parameter in parameters -%}
extern {{ type_struct[parameter.type] }} {{ parameter.name }};
{% endfor %}

#endif // GOPHERCAN_IDS_H_P2
#endif // AUTOGEN_EXTERNS


// End of GopherCAN_ids.h

